// Note: This module appears not to be used
// If it is used, then isOpenBrowselayersModal should be added to the Global settings

import * as React from 'react'
import { useState } from 'react'
import { Form, Input, Label } from 'reactstrap'
import {  Button, Modal } from 'react-bootstrap'
import Flex from '../../common/Flex'
import FalconCloseButton from '../../common/FalconCloseButton'

//import { SearchQueryBuilder, SearchResults, ISearchQuery } from "@pnp/sp/search";

//import { searchItems } from "@esri/arcgis-rest-portal"

type BrowseLayersModalProps = {
  selectedURL: () => any
  setSelectedURL: () => any
  setIsOpenBrowseLayersModal: any
  isOpenBrowseLayersModal: boolean
  //handleProjectLayerAction: any;
}

const portalUrl = 'https://www.arcgis.com/sharing/rest/search'

const BrowseLayersModal = (props: BrowseLayersModalProps) => {
  //setting the state
  //const [selectedData, setSelectedData] = useState(dataSelectionOptions[0]);
  const [searchString, setSearchString] = useState('')

  const toggle = () => props.setIsOpenBrowseLayersModal(!props.isOpenBrowseLayersModal)

  const closeBtn = <FalconCloseButton size="sm" onClick={toggle} className={'m-2 close font-weight-normal'} />

  const handleSubmit = () => {
    //props.handleProjectLayerAction(props.selectedURL);
  }

  // Define a query
  // const query = new SearchQueryBuilder()
  // .match("Seven Natural Wonders of the World")
  // .in("title")
  // .or()
  // .match("Seven Natural Wonders of the World")
  // .in("description")

  // searchItems("Seven Natural Wonders of the World", { portal: "https://www.arcgis.com/sharing/rest" })
  //     .then((response) => {
  //          console.log(response);
  //          showSearchResults(response);
  // });

  const browseLayers = () => {
    //open some sort of catalog to search for online layers
    // var testURL = "https://www.arcgis.com/sharing/rest/search?f=json&q=%22Seven%20Natural%20Wonders%20of%20the%20World%22";
    // var boulderURL = "https://www.arcgis.com/sharing/rest/search?q=boulder&f=json";
    // console.log(boulderURL);
    // var url = "https://www.arcgis.com/sharing/rest";
    // fetch(boulderURL).then(response => {
    //   if (!response.ok) {
    //       throw new Error("HTTP error " + response.status); // Rejects the promise
    //   }else{
    //       response.json().then(jsondata => { handleSearchResults(jsondata) }).catch(err => console.log(err));
    //   }
    // });
  }

  const handleSearchResults = (jsondata) => {
    console.log('totalSize: ' + jsondata.total)
    console.log('resultsSize: ' + jsondata.results.length)

    for (var i = 0; i < jsondata.results.length; i++) {
      let searchResultLayer = jsondata.results[i]
      console.log(searchResultLayer.title + ', ' + searchResultLayer.url)
    }
  }

  const showSearchResults = (response) => {}

  const SearchInputBox = (props) => {
    return (
      <Form.Input
        size="sm"
        className="custom-select custom-select-sm enabled"
        value={searchString}
        onChange={(e) => setSearchString(e.target.value)}
      ></Form.Input>
    )
  }

  const SearchResults = (props) => {
    return (
      <Form.Input
        size="sm"
        className="custom-select custom-select-sm enabled"
        value={searchString}
        onChange={(e) => setSearchString(e.target.value)}
      ></Form.Input>
    )
  }

  //calling the download function
  const handleSelectLayer = (e) => {
    e.preventDefault()
  }

  return (
    <Modal
      isOpen={props.isOpenBrowseLayersModal}
      toggle={toggle}
      modalClassName="theme-modal"
      contentClassName="border"
    >
      <Form
        onSubmit={(e) => {
          e.preventDefault()
          props.setIsOpenBrowseLayersModal(false)
          handleSubmit()
        }}
      >
        <Modal.Header toggle={toggle} className="d-flex flex-between-center border-bottom-0" close={closeBtn}>
          Browse ESRI Layers
        </Modal.Header>
        <Modal.Body>
          <Label className="ps-2 export-label">Search:</Label>
          <Form.Group className="px-3">
            <SearchInputBox />
          </Form.Group>
          <Label className="ps-2 export-label">Results:</Label>
          <Form.Group className="px-3">
            <SearchResults />
          </Form.Group>
        </Modal.Body>
        <Modal.Footer tag={Flex} justify="end" align="center" className="bg-light border-top-0">
          <Button color="primary" type="submit" className="px-4">
            OK
          </Button>
          <Button color="link" tag="a" className="text-600" onClick={toggle}>
            Cancel
          </Button>
        </Modal.Footer>
      </Form>
    </Modal>
  )
}

export default BrowseLayersModal
